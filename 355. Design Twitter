class Tweet{
public:
    Tweet(int id,int time):id_(id),time_(time){}
    int GetTweetId() const{ return id_;}
    int GetTime() const{return time_;}
private:
    int id_;
    int time_;
};
class MyComparator{
public:
    int operator()(const Tweet & p1,const Tweet &p2){
        return p1.GetTime()<p2.GetTime();
    }
};
class Twitter {
private:
    typedef std::priority_queue<Tweet,std::vector<Tweet>,MyComparator> MaxHeap;
    void addTweet(MaxHeap &q,int userId){
        for(const auto &tweet: tweets[userId]){
            q.push(tweet);
        }
    }
    int timer_;
    std::unordered_map<int,std::deque<Tweet>> tweets;
    std::unordered_map<int,std::unordered_set<int>> follower;
public:
    /** Initialize your data structure here. */
    Twitter():timer_(0) {
    }
    
    /** Compose a new tweet. */
    void postTweet(int userId, int tweetId) {
        tweets[userId].emplace_front(Tweet(tweetId,timer_++));//在列表开头即当前第一个元素前添加新的元素
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    vector<int> getNewsFeed(int userId) {
        MaxHeap h;
        std::unordered_set<int> users(follower[userId]);
        users.emplace(userId);
        for(const auto &user :users){
            addTweet(h,user);
        }
        std::vector<int> res;
        while(!h.empty() && res.size()<10){
            res.emplace_back(h.top().GetTweetId());
            h.pop();
        }
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    void follow(int followerId, int followeeId) {
        follower[followerId].emplace(followeeId);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    void unfollow(int followerId, int followeeId) {
        follower[followerId].erase(followeeId);
    }

};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * vector<int> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
